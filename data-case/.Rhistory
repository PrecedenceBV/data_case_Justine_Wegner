---
title: "test_case"
knitr::opts_chunk$set(echo = TRUE)
# ---- 1. Packages laden ----
# Installeer indien nodig
packages <- c("tidyverse", "readr", "ggplot2", "dplyr", "skimr")
installed <- packages %in% rownames(installed.packages())
if (any(!installed)) install.packages(packages[!installed])
lapply(packages, library, character.only = TRUE)
# ---- 2. Data inladen ----
# Voorbeeld met CSV
data <- read_csv("/Users/precedenceintern/Desktop/Case Data analist")  # pas pad aan
data <- read_csv(/Users/precedenceintern/Desktop/Case Data analist)
data <- read_csv("/Users/precedenceintern/Desktop/Case Data analist")
setwd("~/Desktop/Case Data analist")
library(readr)
customer_data_comma <- read_csv("customer_data_comma.csv")
View(customer_data_comma)
View(customer_data_comma)
any(is.na(customer_data_comma))
library(readr)
nps_scores <- read_csv("nps_scores.csv")
View(nps_scores)
View(nps_scores)
library(readr)
nps_scores <- read_delim("nps_scores.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(nps_scores)
nps_scores <- nps_scores %>%
mutate(nps_type = case_when(
score >= 9 ~ "promoter",
score >= 7 ~ "passive",
score >= 0 ~ "detractor",
TRUE ~ NA_character_  # voor eventuele NA's
))
nps_scores <- nps_scores %>%
mutate(nps_type = case_when(
Recommandation_score >= 9 ~ "promoter",
Recommandation_score >= 7 ~ "passive",
Recommandation_score >= 0 ~ "detractor",
TRUE ~ NA_character_  # voor eventuele NA's
))
nps_scores <- nps_scores %>%
mutate(nps_type = case_when(
Recommendation_score >= 9 ~ "promoter",
Recommendation_score >= 7 ~ "passive",
Recommendation_score >= 0 ~ "detractor",
TRUE ~ NA_character_  # voor eventuele NA's
))
# Bereken NPS per NPS_id
nps_per_id <- data_nps %>%
group_by(NPS_id) %>%
summarise(
totaal = n(),
promoters = sum(nps_type == "promoter"),
detractors = sum(nps_type == "detractor"),
nps = round(100 * (promoters / totaal - detractors / totaal), 1)
)
nps_scores <- nps_scores %>%
mutate(nps_type = case_when(
Recommendation_score >= 9 ~ "promoter",
Recommendation_score >= 7 ~ "passive",
Recommendation_score >= 0 ~ "detractor",
TRUE ~ NA_character_  # voor eventuele NA's
))
# Bereken NPS per NPS_id
nps_per_id <- nps_scores %>%
group_by(NPS_id) %>%
summarise(
totaal = n(),
promoters = sum(nps_type == "promoter"),
detractors = sum(nps_type == "detractor"),
nps = round(100 * (promoters / totaal - detractors / totaal), 1)
)
nps_scores <- nps_scores %>%
mutate(nps_type = case_when(
Recommendation_score >= 9 ~ "promoter",
Recommendation_score >= 7 ~ "passive",
Recommendation_score >= 0 ~ "detractor",
TRUE ~ NA_character_  # voor eventuele NA's
))
# Bereken NPS per NPS_id
nps_per_id <- nps_scores %>%
group_by(NPS_ID) %>%
summarise(
totaal = n(),
promoters = sum(nps_type == "promoter"),
detractors = sum(nps_type == "detractor"),
nps = round(100 * (promoters / totaal - detractors / totaal), 1)
)
nps_per_id
nps_per_journey <- data_nps %>%
group_by(journey) %>%
summarise(
totaal = n(),
promoters = sum(nps_type == "promoter", na.rm = TRUE),
detractors = sum(nps_type == "detractor", na.rm = TRUE),
nps = round(100 * (promoters / totaal - detractors / totaal), 1)
) %>%
arrange(nps)  # laagste eerst
nps_scores <- nps_scores %>%
mutate(nps_type = case_when(
Recommendation_score >= 9 ~ "promoter",
Recommendation_score >= 7 ~ "passive",
Recommendation_score >= 0 ~ "detractor",
TRUE ~ NA_character_  # voor eventuele NA's
))
nps_per_journey <- nps_scores %>%
group_by(journey) %>%
summarise(
totaal = n(),
promoters = sum(nps_type == "promoter", na.rm = TRUE),
detractors = sum(nps_type == "detractor", na.rm = TRUE),
nps = round(100 * (promoters / totaal - detractors / totaal), 1)
) %>%
arrange(nps)  # laagste eerst
nps_scores <- nps_scores %>%
mutate(nps_type = case_when(
Recommendation_score >= 9 ~ "promoter",
Recommendation_score >= 7 ~ "passive",
Recommendation_score >= 0 ~ "detractor",
TRUE ~ NA_character_  # voor eventuele NA's
))
nps_per_journey <- nps_scores %>%
group_by(Journey_Type) %>%
summarise(
totaal = n(),
promoters = sum(nps_type == "promoter", na.rm = TRUE),
detractors = sum(nps_type == "detractor", na.rm = TRUE),
nps = round(100 * (promoters / totaal - detractors / totaal), 1)
) %>%
arrange(nps)  # laagste eerst
nps_per_journey
